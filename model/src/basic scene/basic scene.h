#pragma once
#ifndef AVL_MODEL_BASIC_SCENE__
#define AVL_MODEL_BASIC_SCENE__
/* Copyright 2012 Sheldon Bachstein
This file is part of the avl Library.

The avl Library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

The avl Library is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with the avl Library.  If not, see <http://www.gnu.org/licenses/>.
*/
/**
@file
<Autogenerated stub>
@author Sheldon Bachstein
@date Jun 30, 2012
*/

#include"..\scene\scene.h"
#include"..\agent\agent.h"
#include"..\..\..\utility\src\graphic\graphic.h"
#include"..\..\..\utility\src\sound effect\sound effect.h"
#include"..\..\..\utility\src\input events\input events.h"
#include"..\..\..\utility\src\timer\timer.h"
#include"..\..\..\utility\src\vector\vector.h"
#include<list>
#include<memory>


namespace avl
{
namespace model
{

	/**
	Represents a distinct model space with any number of independent agents.
	*/
	class BasicScene: public Scene
	{
	public:
		/** Basic constructor.
		@param initial_time_step The amount of time, in seconds, at which
		to update each agent in the scene. If this is 0 or less then no 
		timestep will be used, and agents will be updated at whichever pace
		Update() is called at.
		@param screen_space The resolution of the visible screen, with (0, 0)
		being the center of the screen.
		*/
		BasicScene(const double& initial_time_step, const utility::Vector& screen_space);

		/** Basic destructor.
		*/
		virtual ~BasicScene();

		/** Retrieves the graphics representing this scene.
		@return The graphics representing the scene.
		*/
		const utility::GraphicList GetGraphics();
		
		/** Retrieves the sound effects representing this scene.
		@return The sound effects representing the scene.
		*/
		utility::SoundEffectList GetSoundEffects();
		
		/** Updates the scene. If a timestep was specified upon
		creation, then the scene will only be updated in chunks of
		time as specified.
		*/
		virtual void Update();

		/** Pauses the scene so that elapsed time is not accumulated until
		the next call to Update().
		*/
		virtual void Pause();



	protected:

		/** Distribute an action to all agents in the scenes.
		@param action The action to be distributed.
		*/
		void DistributeAction(const Action& action);

		/// The resolution of the visible screen space. The x component
		/// specifies the width of the visible screen space along the x
		/// axis, and the y component specifies the width of the
		/// visible screen space along hte y axis. The center of the
		/// screen is the point (0, 0).
		const utility::Vector screen_space_resolution;

		/// The agents acting in the scene.
		std::list<std::auto_ptr<Agent>> agents;

		/// The timestep at which agents are updated.
		const double time_step;

		/// Used to track time changes.
		utility::Timer timer;

		/// NOT IMPLEMENTED.
		BasicScene(const BasicScene&);
		/// NOT IMPLEMENTED.
		const BasicScene& operator=(const BasicScene&);
	};



} // model
} // avl
#endif // AVL_MODEL_BASIC_SCENE__
