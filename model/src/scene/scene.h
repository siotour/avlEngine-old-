#pragma once
#ifndef AVL_MODEL_SCENE__
#define AVL_MODEL_SCENE__
/* Copyright 2012 Sheldon Bachstein
This file is part of the avl Library.

The avl Library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

The avl Library is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with the avl Library.  If not, see <http://www.gnu.org/licenses/>.
*/
/**
@file
<Autogenerated stub>
@author Sheldon Bachstein
@date Jun 27, 2012
*/

#include"..\..\..\utility\src\sprite\sprite.h"
#include"..\..\..\utility\src\sound effect\sound effect.h"
#include"..\..\..\utility\src\input events\input events.h"


namespace avl
{
namespace model
{
	/**
	Represents a distinct model space with any number of independent agents.
	*/
	class Scene
	{
	public:
		/** Basic constructor.
		*/
		Scene();

		/** Basic destructor.
		*/
		virtual ~Scene();

		/** Retrieves the sprites representing this scene.
		@return The sprites representing the scene.
		*/
		virtual utility::SpriteList GetSprites() = 0;
		
		/** Retrieves the sound effects representing this scene.
		@return The sound effects representing the scene.
		*/
		virtual utility::SoundEffectList GetSoundEffects() = 0;
		
		/** Processes input events and updates the scene as necessary.
		*/
		virtual void ProcessInput(utility::input_events::InputQueue& input) = 0;
		
		/** Updates the scene.
		*/
		virtual void Update() = 0;

		/** Pauses the scene so that elapsed time is not accumulated until
		the next call to Update().
		*/
		virtual void Pause() = 0;

		/// NOT IMPLEMENTED.
		Scene(const Scene&);
		/// NOT IMPLEMENTED.
		const Scene& operator=(const Scene&);

	};




} // model
} // avl
#endif // AVL_MODEL_SCENE__
